<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Panel de Administración - Barbería</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        :root {
            --primary: #2c3e50;
            --secondary: #3498db;
            --accent: #e67e22;
            --light: #ecf0f1;
            --dark: #34495e;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            padding-bottom: 60px;
        }
        
        .sidebar {
            background: linear-gradient(135deg, var(--primary), var(--dark));
            color: white;
            height: 100vh;
            position: fixed;
            z-index: 1000;
            width: 250px;
        }
        
        .main-content {
            margin-left: 250px;
        }
        
        .status-pending {
            background-color: #fff3cd;
            color: #856404;
        }
        
        .status-confirmed {
            background-color: #d4edda;
            color: #155724;
        }
        
        .status-rejected {
            background-color: #f8d7da;
            color: #721c24;
        }
        
        .status-available {
            background-color: #cce5ff;
            color: #004085;
        }
        
        .nav-link.active {
            background-color: rgba(255,255,255,0.1);
            border-radius: 5px;
        }
        
        #loginSection {
            max-width: 400px;
            margin: 50px auto;
            padding: 20px;
        }
        
        /* Calendario mejorado */
        #calendario {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .calendario-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 0 10px;
        }
        
        .calendario-header button {
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            cursor: pointer;
            font-size: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }
        
        .calendario-header button:hover {
            background: var(--dark);
        }
        
        .calendario-header span {
            font-size: 18px;
            font-weight: bold;
            color: var(--primary);
            text-align: center;
            flex-grow: 1;
        }
        
        #calendario table {
            width: 100%;
            border-collapse: collapse;
        }
        
        #calendario th {
            padding: 12px 8px;
            text-align: center;
            font-weight: bold;
            color: var(--primary);
            border-bottom: 2px solid #eee;
        }
        
        #calendario td {
            padding: 12px 8px;
            text-align: center;
            cursor: pointer;
            border-radius: 50%;
            width: 14.28%;
            height: 40px;
            transition: all 0.2s;
        }
        
        #calendario td:hover:not(.disabled):not(.empty) {
            background-color: #e3f2fd;
            transform: scale(1.1);
        }
        
        #calendario td.selected {
            background-color: var(--accent);
            color: white;
            font-weight: bold;
        }
        
        #calendario td.today {
            background-color: #2196f3;
            color: white;
            font-weight: bold;
        }
        
        #calendario td.disabled {
            color: #ccc;
            cursor: not-allowed;
            background-color: #f5f5f5;
        }
        
        #calendario td.empty {
            cursor: default;
        }
        
        #calendario td.bloqueado {
            background-color: #ffcdd2;
            color: #c62828;
            text-decoration: line-through;
        }
        
        #calendario td.bloqueado:hover {
            background-color: #ffcdd2;
            transform: none;
        }
        
        #calendario td.pasado {
            background-color: #e9ecef;
            color: #6c757d;
            cursor: not-allowed;
        }
        
        /* Bloqueo item */
        .bloqueo-item {
            border-left: 3px solid var(--accent);
            padding: 10px;
            margin-bottom: 10px;
            background-color: #f8f9fa;
            border-radius: 5px;
        }
        
        .bloqueo-item .fecha {
            font-weight: bold;
            color: var(--primary);
        }
        
        .bloqueo-item .motivo {
            font-size: 0.9em;
            color: #6c757d;
        }
        
        /* Mobile optimizations */
        @media (max-width: 992px) {
            .sidebar {
                transform: translateX(-100%);
                width: 280px;
            }
            
            .sidebar.active {
                transform: translateX(0);
            }
            
            .main-content {
                margin-left: 0;
            }
            
            .overlay {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.5);
                z-index: 999;
                display: none;
            }
            
            .overlay.active {
                display: block;
            }
        }
        
        @media (max-width: 768px) {
            #loginSection {
                margin: 20px;
                padding: 15px;
            }
            
            .section-title {
                font-size: 1.5rem;
            }
            
            .form-control, .form-select {
                font-size: 16px; /* Previene el zoom en iOS */
            }
            
            .table-responsive {
                font-size: 0.85rem;
            }
            
            .table th, .table td {
                padding: 0.5rem;
            }
            
            #calendario td {
                padding: 8px 4px;
                height: 35px;
                font-size: 14px;
            }
            
            .calendario-header button {
                width: 28px;
                height: 28px;
                font-size: 12px;
            }
            
            .calendario-header span {
                font-size: 14px;
            }
            
            .card {
                margin-bottom: 15px;
            }
            
            .btn {
                padding: 6px 10px;
                font-size: 13px;
            }
            
            .btn-sm {
                padding: 4px 8px;
                font-size: 12px;
            }
            
            /* Tabla compacta para móviles */
            .table-mobile-compact th,
            .table-mobile-compact td {
                white-space: nowrap;
            }
            
            .table-mobile-compact .acciones-col {
                width: 1%;
                white-space: nowrap;
            }
            
            /* Ocultar columnas en móviles */
            .table-mobile-compact th:nth-child(n+4):nth-child(-n+6),
            .table-mobile-compact td:nth-child(n+4):nth-child(-n+6) {
                display: none;
            }
        }
        
        @media (max-width: 576px) {
            .table-responsive {
                font-size: 0.75rem;
            }
            
            .table th, .table td {
                padding: 0.3rem;
            }
        }
    </style>
</head>
<body>
    <!-- Login Section -->
    <div id="loginSection" class="container">
        <div class="card">
            <div class="card-header text-center">
                <h4>Panel de Administración</h4>
                <p class="text-muted">Iniciar Sesión</p>
            </div>
            <div class="card-body">
                <form id="loginForm">
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" required>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Contraseña</label>
                        <input type="password" class="form-control" id="password" required>
                    </div>
                    <button type="submit" class="btn btn-primary w-100" id="loginBtn">
                        <span id="loginText">Iniciar Sesión</span>
                        <span id="loginSpinner" class="spinner-border spinner-border-sm d-none me-2"></span>
                    </button>
                </form>
                <div id="loginError" class="alert alert-danger mt-3 d-none"></div>
            </div>
        </div>
    </div>

    <!-- Overlay para menú móvil -->
    <div class="overlay" id="overlay"></div>

    <!-- Admin Panel (oculto inicialmente) -->
    <div id="adminPanel" class="d-none">
        <div class="container-fluid">
            <div class="row">
                <!-- Sidebar -->
                <nav class="col-md-3 col-lg-2 d-md-block sidebar">
                    <div class="position-sticky pt-3">
                        <div class="text-center mb-4">
                            <h5 class="text-white">Admin Panel</h5>
                            <button class="btn btn-sm btn-outline-light" id="logoutBtn">
                                <i class="bi bi-box-arrow-right me-1"></i>Salir
                            </button>
                        </div>
                        <ul class="nav flex-column">
                            <li class="nav-item">
                                <a class="nav-link active text-white" href="#" data-tab="reservas">
                                    <i class="bi bi-calendar-check me-2"></i>Reservas
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-white" href="#" data-tab="barberos">
                                    <i class="bi bi-people me-2"></i>Barberos
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-white" href="#" data-tab="servicios">
                                    <i class="bi bi-scissors me-2"></i>Servicios
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-white" href="#" data-tab="disponibilidad">
                                    <i class="bi bi-calendar-x me-2"></i>Disponibilidad
                                </a>
                            </li>
                        </ul>
                    </div>
                </nav>

                <!-- Main Content -->
                <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
                    <!-- Navbar para móviles -->
                    <nav class="navbar navbar-expand-lg navbar-dark bg-primary mb-4 d-lg-none">
                        <div class="container-fluid">
                            <a class="navbar-brand" href="#">Admin Panel</a>
                            <button class="navbar-toggler" type="button" id="menuToggle">
                                <span class="navbar-toggler-icon"></span>
                            </button>
                        </div>
                    </nav>

                    <!-- Reservas Tab -->
                    <div class="tab-content" id="reservas-tab">
                        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                            <h1 class="h2">Gestión de Reservas</h1>
                        </div>

                        <!-- Filtros -->
                        <div class="row mb-4">
                            <div class="col-md-3 col-sm-6 mb-2">
                                <select class="form-select" id="filterStatus">
                                    <option value="">Todos los estados</option>
                                    <option value="pendiente">Pendiente</option>
                                    <option value="confirmado">Confirmado</option>
                                    <option value="rechazado">Rechazado</option>
                                </select>
                            </div>
                            <div class="col-md-3 col-sm-6 mb-2">
                                <select class="form-select" id="filterBarber">
                                    <option value="">Todos los barberos</option>
                                </select>
                            </div>
                            <div class="col-md-3 col-sm-6 mb-2">
                                <input type="date" class="form-control" id="filterDate">
                            </div>
                            <div class="col-md-3 col-sm-6 mb-2">
                                <button class="btn btn-primary w-100" id="applyFilters">
                                    <i class="bi bi-funnel me-1"></i>Filtrar
                                </button>
                            </div>
                        </div>

                        <!-- Tabla de Reservas -->
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">Reservas Recientes</h5>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover table-mobile-compact">
                                        <thead>
                                            <tr>
                                                <th>Cliente</th>
                                                <th>Estado</th>
                                                <th>Fecha/Hora</th>
                                                <th class="d-none d-md-table-cell">Servicio</th>
                                                <th class="d-none d-md-table-cell">Barbero</th>
                                                <th class="d-none d-md-table-cell">Celular</th>
                                                <th class="acciones-col">Acciones</th>
                                            </tr>
                                        </thead>
                                        <tbody id="reservasTable">
                                            <tr>
                                                <td colspan="7" class="text-center">
                                                    <div class="spinner-border" role="status">
                                                        <span class="visually-hidden">Cargando...</span>
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Barberos Tab -->
                    <div class="tab-content d-none" id="barberos-tab">
                        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                            <h1 class="h2">Gestión de Barberos</h1>
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#barberoModal">
                                <i class="bi bi-plus-lg me-1"></i>Agregar Barbero
                            </button>
                        </div>

                        <div class="row" id="barberosContainer">
                            <!-- Los barberos se cargarán aquí -->
                        </div>
                    </div>

                    <!-- Servicios Tab -->
                    <div class="tab-content d-none" id="servicios-tab">
                        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                            <h1 class="h2">Gestión de Servicios</h1>
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#servicioModal">
                                <i class="bi bi-plus-lg me-1"></i>Agregar Servicio
                            </button>
                        </div>

                        <div class="row" id="serviciosContainer">
                            <!-- Los servicios se cargarán aquí -->
                        </div>
                    </div>

                    <!-- Disponibilidad Tab -->
                    <div class="tab-content d-none" id="disponibilidad-tab">
                        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                            <h1 class="h2">Gestión de Disponibilidad</h1>
                        </div>

                        <div class="row">
                            <div class="col-md-4 mb-4">
                                <div class="card">
                                    <div class="card-header">
                                        <h5 class="card-title mb-0">Seleccionar Barbero</h5>
                                    </div>
                                    <div class="card-body">
                                        <select class="form-select" id="barberoDisponibilidadSelect">
                                            <option value="">Selecciona un barbero</option>
                                        </select>
                                    </div>
                                </div>

                                <div class="card mt-3">
                                    <div class="card-header">
                                        <h5 class="card-title mb-0">Bloquear Día</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label for="fechaBloqueo" class="form-label">Fecha</label>
                                            <input type="date" class="form-control" id="fechaBloqueo">
                                        </div>
                                        <div class="mb-3">
                                            <label for="motivoBloqueo" class="form-label">Motivo</label>
                                            <select class="form-select" id="motivoBloqueo">
                                                <option value="dia_libre">Día Libre</option>
                                                <option value="enfermedad">Enfermedad</option>
                                                <option value="vacaciones">Vacaciones</option>
                                                <option value="otro">Otro</option>
                                            </select>
                                        </div>
                                        <div class="mb-3" id="otroMotivoContainer" style="display: none;">
                                            <label for="otroMotivo" class="form-label">Especificar motivo</label>
                                            <input type="text" class="form-control" id="otroMotivo" placeholder="Ingresa el motivo">
                                        </div>
                                        <button class="btn btn-danger w-100" id="bloquearDiaBtn">
                                            <i class="bi bi-lock me-1"></i>Bloquear Día
                                        </button>
                                    </div>
                                </div>
                                
                                <!-- Mostrar días bloqueados -->
                                <div class="card mt-3">
                                    <div class="card-header">
                                        <h5 class="card-title mb-0">Días Bloqueados</h5>
                                    </div>
                                    <div class="card-body">
                                        <div id="diasBloqueadosContainer">
                                            <div class="text-muted">Selecciona un barbero para ver días bloqueados</div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-8">
                                <div class="card">
                                    <div class="card-body">
                                        <div id="calendario">
                                            <div class="calendario-header">
                                                <button id="prevMonthDisp">«</button>
                                                <span id="mesAnioActualDisp">Agosto 2024</span>
                                                <button id="nextMonthDisp">»</button>
                                            </div>
                                            <table>
                                                <thead>
                                                    <tr>
                                                        <th>Dom</th>
                                                        <th>Lun</th>
                                                        <th>Mar</th>
                                                        <th>Mié</th>
                                                        <th>Jue</th>
                                                        <th>Vie</th>
                                                        <th>Sáb</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="calendarioBodyDisp">
                                                    <!-- El calendario se generará aquí -->
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </main>
            </div>
        </div>

        <!-- Modal para Barbero -->
        <div class="modal fade" id="barberoModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="barberoModalLabel">Agregar/Editar Barbero</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="barberoForm">
                            <input type="hidden" id="barberoId">
                            <div class="mb-3">
                                <label for="barberoNombre" class="form-label">Nombre</label>
                                <input type="text" class="form-control" id="barberoNombre" required>
                            </div>
                            <div class="mb-3">
                                <label for="barberoDescripcion" class="form-label">Descripción</label>
                                <textarea class="form-control" id="barberoDescripcion" rows="3"></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="button" class="btn btn-primary" id="saveBarberoBtn">Guardar</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal para Servicio -->
        <div class="modal fade" id="servicioModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="servicioModalLabel">Agregar/Editar Servicio</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="servicioForm">
                            <input type="hidden" id="servicioId">
                            <div class="mb-3">
                                <label for="servicioNombre" class="form-label">Nombre</label>
                                <input type="text" class="form-control" id="servicioNombre" required>
                            </div>
                            <div class="mb-3">
                                <label for="servicioDescripcion" class="form-label">Descripción</label>
                                <textarea class="form-control" id="servicioDescripcion" rows="3"></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="servicioPrecio" class="form-label">Precio</label>
                                <input type="number" class="form-control" id="servicioPrecio" required>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="button" class="btn btn-primary" id="saveServicioBtn">Guardar</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal para detalles de reserva -->
        <div class="modal fade" id="detalleReservaModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Detalles de Reserva</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">
                                <strong>Cliente:</strong> <span id="detalleNombre"></span>
                            </li>
                            <li class="list-group-item">
                                <strong>Celular:</strong> <span id="detalleCelular"></span>
                            </li>
                            <li class="list-group-item">
                                <strong>Servicio:</strong> <span id="detalleServicio"></span>
                            </li>
                            <li class="list-group-item">
                                <strong>Barbero:</strong> <span id="detalleBarbero"></span>
                            </li>
                            <li class="list-group-item">
                                <strong>Fecha y Hora:</strong> <span id="detalleFechaHora"></span>
                            </li>
                            <li class="list-group-item">
                                <strong>Estado:</strong> 
                                <span id="detalleEstado" class="badge"></span>
                            </li>
                        </ul>
                    </div>
                    <div class="modal-footer" id="accionesReserva">
                        <!-- Las acciones se mostrarán según el estado -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal para confirmar acciones -->
        <div class="modal fade" id="actionModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="actionModalLabel">Confirmar Acción</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <p id="actionMessage"></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="button" class="btn btn-primary" id="confirmAction">Confirmar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script type="module">
        // Importar Firebase
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-app.js";
        import { getAuth, signInWithEmailAndPassword, signOut, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-auth.js";
        import { getFirestore, collection, getDocs, addDoc, updateDoc, deleteDoc, doc, query, where, orderBy } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore.js";

        // Configuración de Firebase
        const firebaseConfig = {
            apiKey: "<%= process.env.FIREBASE_API_KEY %>",
            authDomain: "<%= process.env.FIREBASE_AUTH_DOMAIN %>",
            projectId: "<%= process.env.FIREBASE_PROJECT_ID %>",
            storageBucket: "<%= process.env.FIREBASE_STORAGE_BUCKET %>",
            messagingSenderId: "<%= process.env.FIREBASE_MESSAGING_SENDER_ID %>",
            appId: "<%= process.env.FIREBASE_APP_ID %>"
        };

        // Inicializar Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // Variables globales
        let currentAction = null;
        let currentReservaId = null;
        let reservasData = [];
        let barberosData = [];
        let serviciosData = [];
        let currentTab = 'reservas';
        let currentMonthDisp = new Date().getMonth();
        let currentYearDisp = new Date().getFullYear();
        let selectedBarberoIdDisp = '';
        let selectedDateDisp = null;
        let bloqueosData = [];

        // Elementos del DOM
        const loginSection = document.getElementById('loginSection');
        const adminPanel = document.getElementById('adminPanel');
        const loginForm = document.getElementById('loginForm');
        const loginBtn = document.getElementById('loginBtn');
        const loginText = document.getElementById('loginText');
        const loginSpinner = document.getElementById('loginSpinner');
        const loginError = document.getElementById('loginError');
        const logoutBtn = document.getElementById('logoutBtn');
        const reservasTable = document.getElementById('reservasTable');
        const filterStatus = document.getElementById('filterStatus');
        const filterBarber = document.getElementById('filterBarber');
        const filterDate = document.getElementById('filterDate');
        const applyFilters = document.getElementById('applyFilters');
        const actionModal = new bootstrap.Modal(document.getElementById('actionModal'));
        const actionMessage = document.getElementById('actionMessage');
        const confirmAction = document.getElementById('confirmAction');
        const barberoModal = new bootstrap.Modal(document.getElementById('barberoModal'));
        const servicioModal = new bootstrap.Modal(document.getElementById('servicioModal'));
        const detalleReservaModal = new bootstrap.Modal(document.getElementById('detalleReservaModal'));
        const sidebar = document.querySelector('.sidebar');
        const overlay = document.getElementById('overlay');
        const menuToggle = document.getElementById('menuToggle');

        // Verificar estado de autenticación
        onAuthStateChanged(auth, (user) => {
            if (user) {
                // Usuario autenticado
                loginSection.classList.add('d-none');
                adminPanel.classList.remove('d-none');
                cargarDatosIniciales();
            } else {
                // Usuario no autenticado
                loginSection.classList.remove('d-none');
                adminPanel.classList.add('d-none');
            }
        });

        // Toggle menú móvil
        menuToggle.addEventListener('click', function() {
            sidebar.classList.toggle('active');
            overlay.classList.toggle('active');
        });

        // Cerrar menú al hacer clic en overlay
        overlay.addEventListener('click', function() {
            sidebar.classList.remove('active');
            overlay.classList.remove('active');
        });

        // Función de login
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            
            // Mostrar spinner
            loginText.classList.add('d-none');
            loginSpinner.classList.remove('d-none');
            loginBtn.disabled = true;
            loginError.classList.add('d-none');
            
            try {
                await signInWithEmailAndPassword(auth, email, password);
                // El estado de autenticación se manejará automáticamente
            } catch (error) {
                console.error('Error de login:', error);
                loginError.textContent = 'Credenciales inválidas. Por favor intente nuevamente.';
                loginError.classList.remove('d-none');
            } finally {
                // Ocultar spinner
                loginText.classList.remove('d-none');
                loginSpinner.classList.add('d-none');
                loginBtn.disabled = false;
            }
        });

        // Función de logout
        logoutBtn.addEventListener('click', async () => {
            try {
                await signOut(auth);
            } catch (error) {
                console.error('Error al cerrar sesión:', error);
            }
        });

        // Cargar datos iniciales
        async function cargarDatosIniciales() {
            await cargarBarberos();
            await cargarServicios();
            await cargarReservas();
        }

        // Navegación entre tabs
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                
                // Cerrar menú en móviles
                sidebar.classList.remove('active');
                overlay.classList.remove('active');
                
                // Remover active de todos los links
                document.querySelectorAll('.nav-link').forEach(l => {
                    l.classList.remove('active');
                });
                
                // Agregar active al link clickeado
                this.classList.add('active');
                
                // Ocultar todos los tabs
                document.querySelectorAll('.tab-content').forEach(tab => {
                    tab.classList.add('d-none');
                });
                
                // Mostrar el tab correspondiente
                const tabName = this.dataset.tab;
                currentTab = tabName;
                document.getElementById(`${tabName}-tab`).classList.remove('d-none');
                
                // Cargar datos según el tab
                switch(tabName) {
                    case 'reservas':
                        cargarReservas();
                        break;
                    case 'barberos':
                        cargarBarberos();
                        break;
                    case 'servicios':
                        cargarServicios();
                        break;
                    case 'disponibilidad':
                        cargarBarberosParaDisponibilidad();
                        generarCalendarioDisp(currentMonthDisp, currentYearDisp);
                        break;
                }
            });
        });

        // Cargar barberos para filtros y selects
        async function cargarBarberos() {
            try {
                const barberosSnapshot = await getDocs(collection(db, 'barberos'));
                barberosData = [];
                barberosSnapshot.forEach((doc) => {
                    barberosData.push({ id: doc.id, ...doc.data() });
                });
                
                // Actualizar filtro de barberos
                filterBarber.innerHTML = '<option value="">Todos los barberos</option>';
                barberosData.forEach(barbero => {
                    const option = document.createElement('option');
                    option.value = barbero.id;
                    option.textContent = barbero.nombre;
                    filterBarber.appendChild(option);
                });
                
                // Si estamos en el tab de barberos, mostrarlos
                if (currentTab === 'barberos') {
                    mostrarBarberos();
                }
            } catch (error) {
                console.error('Error al cargar barberos:', error);
                if (currentTab === 'barberos') {
                    document.getElementById('barberosContainer').innerHTML = 
                        '<div class="col-12"><div class="alert alert-danger">Error al cargar barberos</div></div>';
                }
            }
        }

        // Mostrar barberos en el tab correspondiente
        function mostrarBarberos() {
            const container = document.getElementById('barberosContainer');
            container.innerHTML = '';
            
            if (barberosData.length === 0) {
                container.innerHTML = '<div class="col-12"><div class="alert alert-info">No hay barberos registrados</div></div>';
                return;
            }
            
            barberosData.forEach(barbero => {
                const col = document.createElement('div');
                col.className = 'col-md-4 mb-4';
                col.innerHTML = `
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">${barbero.nombre}</h5>
                            <p class="card-text">${barbero.descripcion || ''}</p>
                            <div class="d-flex justify-content-end">
                                <button class="btn btn-sm btn-outline-primary edit-barbero me-2" data-id="${barbero.id}">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger delete-barbero" data-id="${barbero.id}">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                container.appendChild(col);
            });
            
            // Agregar event listeners
            document.querySelectorAll('.edit-barbero').forEach(btn => {
                btn.addEventListener('click', function() {
                    const id = this.dataset.id;
                    editarBarbero(id);
                });
            });
            
            document.querySelectorAll('.delete-barbero').forEach(btn => {
                btn.addEventListener('click', function() {
                    const id = this.dataset.id;
                    eliminarBarbero(id);
                });
            });
        }

        // Editar barbero
        function editarBarbero(id) {
            const barbero = barberosData.find(b => b.id === id);
            if (barbero) {
                document.getElementById('barberoId').value = barbero.id;
                document.getElementById('barberoNombre').value = barbero.nombre;
                document.getElementById('barberoDescripcion').value = barbero.descripcion || '';
                barberoModal.show();
            }
        }

        // Eliminar barbero
        function eliminarBarbero(id) {
            showActionModal('delete-barbero', id, '¿Eliminar este barbero? Esta acción no se puede deshacer.');
        }

        // Guardar barbero
        document.getElementById('saveBarberoBtn').addEventListener('click', async function() {
            const id = document.getElementById('barberoId').value;
            const barbero = {
                nombre: document.getElementById('barberoNombre').value,
                descripcion: document.getElementById('barberoDescripcion').value
            };
            
            try {
                if (id) {
                    // Actualizar barbero existente
                    await updateDoc(doc(db, 'barberos', id), barbero);
                } else {
                    // Crear nuevo barbero
                    await addDoc(collection(db, 'barberos'), barbero);
                }
                
                barberoModal.hide();
                document.getElementById('barberoForm').reset();
                document.getElementById('barberoId').value = '';
                await cargarBarberos();
            } catch (error) {
                console.error('Error al guardar barbero:', error);
                alert('Error al guardar barbero: ' + error.message);
            }
        });

        // Cargar servicios
        async function cargarServicios() {
            try {
                const serviciosSnapshot = await getDocs(collection(db, 'servicios'));
                serviciosData = [];
                serviciosSnapshot.forEach((doc) => {
                    serviciosData.push({ id: doc.id, ...doc.data() });
                });
                
                // Si estamos en el tab de servicios, mostrarlos
                if (currentTab === 'servicios') {
                    mostrarServicios();
                }
            } catch (error) {
                console.error('Error al cargar servicios:', error);
                if (currentTab === 'servicios') {
                    document.getElementById('serviciosContainer').innerHTML = 
                        '<div class="col-12"><div class="alert alert-danger">Error al cargar servicios</div></div>';
                }
            }
        }

        // Mostrar servicios
        function mostrarServicios() {
            const container = document.getElementById('serviciosContainer');
            container.innerHTML = '';
            
            if (serviciosData.length === 0) {
                container.innerHTML = '<div class="col-12"><div class="alert alert-info">No hay servicios registrados</div></div>';
                return;
            }
            
            serviciosData.forEach(servicio => {
                const col = document.createElement('div');
                col.className = 'col-md-4 mb-4';
                col.innerHTML = `
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">${servicio.nombre}</h5>
                            <p class="card-text">${servicio.descripcion || ''}</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <h6 class="text-primary">$${servicio.precio || 0}</h6>
                                <div>
                                    <button class="btn btn-sm btn-outline-primary edit-servicio me-2" data-id="${servicio.id}">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger delete-servicio" data-id="${servicio.id}">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                container.appendChild(col);
            });
            
            // Agregar event listeners
            document.querySelectorAll('.edit-servicio').forEach(btn => {
                btn.addEventListener('click', function() {
                    const id = this.dataset.id;
                    editarServicio(id);
                });
            });
            
            document.querySelectorAll('.delete-servicio').forEach(btn => {
                btn.addEventListener('click', function() {
                    const id = this.dataset.id;
                    eliminarServicio(id);
                });
            });
        }

        // Editar servicio
        function editarServicio(id) {
            const servicio = serviciosData.find(s => s.id === id);
            if (servicio) {
                document.getElementById('servicioId').value = servicio.id;
                document.getElementById('servicioNombre').value = servicio.nombre;
                document.getElementById('servicioDescripcion').value = servicio.descripcion || '';
                document.getElementById('servicioPrecio').value = servicio.precio || '';
                servicioModal.show();
            }
        }

        // Eliminar servicio
        function eliminarServicio(id) {
            showActionModal('delete-servicio', id, '¿Eliminar este servicio? Esta acción no se puede deshacer.');
        }

        // Guardar servicio
        document.getElementById('saveServicioBtn').addEventListener('click', async function() {
            const id = document.getElementById('servicioId').value;
            const servicio = {
                nombre: document.getElementById('servicioNombre').value,
                descripcion: document.getElementById('servicioDescripcion').value,
                precio: parseFloat(document.getElementById('servicioPrecio').value)
            };
            
            try {
                if (id) {
                    // Actualizar servicio existente
                    await updateDoc(doc(db, 'servicios', id), servicio);
                } else {
                    // Crear nuevo servicio
                    await addDoc(collection(db, 'servicios'), servicio);
                }
                
                servicioModal.hide();
                document.getElementById('servicioForm').reset();
                document.getElementById('servicioId').value = '';
                await cargarServicios();
            } catch (error) {
                console.error('Error al guardar servicio:', error);
                alert('Error al guardar servicio: ' + error.message);
            }
        });

        // Cargar reservas
        async function cargarReservas() {
            try {
                const reservasSnapshot = await getDocs(collection(db, 'reservas'));
                reservasData = [];
                reservasSnapshot.forEach((doc) => {
                    reservasData.push({ id: doc.id, ...doc.data() });
                });
                renderReservas(reservasData);
            } catch (error) {
                console.error('Error al cargar reservas:', error);
                reservasTable.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center text-danger">
                            Error al cargar reservas: ${error.message}
                        </td>
                    </tr>
                `;
            }
        }

        // Renderizar tabla de reservas (MEJORADA)
        function renderReservas(reservasFiltradas) {
            const reservasMostrar = reservasFiltradas || reservasData;
            reservasTable.innerHTML = '';

            if (reservasMostrar.length === 0) {
                reservasTable.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center">No se encontraron reservas</td>
                    </tr>
                `;
                return;
            }

            reservasMostrar.forEach(reserva => {
                const barbero = barberosData.find(b => b.id === reserva.barberoId) || { nombre: 'Desconocido' };
                const servicio = serviciosData.find(s => s.id === reserva.servicio) || { nombre: 'Desconocido' };
                
                // Formatear la fecha y hora de la reserva
                let fechaHoraFormateada = 'Fecha no disponible';
                if (reserva.horarioId) {
                    const fechaHora = new Date(reserva.horarioId);
                    if (!isNaN(fechaHora.getTime())) {
                        fechaHoraFormateada = fechaHora.toLocaleString('es-ES', {
                            weekday: 'short',
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        });
                    }
                }
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${reserva.nombre}</td>
                    <td>
                        <span class="badge ${getStatusClass(reserva.estado)}">
                            ${getStatusText(reserva.estado)}
                        </span>
                    </td>
                    <td>
                        <div class="reserva-hora">${fechaHoraFormateada}</div>
                    </td>
                    <td class="d-none d-md-table-cell">${servicio.nombre}</td>
                    <td class="d-none d-md-table-cell">${barbero.nombre}</td>
                    <td class="d-none d-md-table-cell">${reserva.celular}</td>
                    <td class="acciones-col">
                        <button class="btn btn-sm btn-outline-primary ver-detalle" data-id="${reserva.id}">
                            <i class="bi bi-eye"></i>
                        </button>
                    </td>
                `;
                reservasTable.appendChild(row);
            });

            // Agregar event listeners a los botones de ver detalle
            document.querySelectorAll('.ver-detalle').forEach(btn => {
                btn.addEventListener('click', function() {
                    const id = this.dataset.id;
                    mostrarDetalleReserva(id);
                });
            });
        }

        // Mostrar detalle de reserva
        function mostrarDetalleReserva(id) {
            const reserva = reservasData.find(r => r.id === id);
            if (reserva) {
                const barbero = barberosData.find(b => b.id === reserva.barberoId) || { nombre: 'Desconocido' };
                const servicio = serviciosData.find(s => s.id === reserva.servicio) || { nombre: 'Desconocido' };
                
                // Formatear la fecha y hora de la reserva
                let fechaHoraFormateada = 'Fecha no disponible';
                if (reserva.horarioId) {
                    const fechaHora = new Date(reserva.horarioId);
                    if (!isNaN(fechaHora.getTime())) {
                        fechaHoraFormateada = fechaHora.toLocaleString('es-ES', {
                            weekday: 'long',
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        });
                    }
                }
                
                // Mostrar datos en el modal
                document.getElementById('detalleNombre').textContent = reserva.nombre;
                document.getElementById('detalleCelular').textContent = reserva.celular;
                document.getElementById('detalleServicio').textContent = servicio.nombre;
                document.getElementById('detalleBarbero').textContent = barbero.nombre;
                document.getElementById('detalleFechaHora').textContent = fechaHoraFormateada;
                document.getElementById('detalleEstado').textContent = getStatusText(reserva.estado);
                document.getElementById('detalleEstado').className = `badge ${getStatusClass(reserva.estado)}`;
                
                // Mostrar acciones según el estado
                const accionesReserva = document.getElementById('accionesReserva');
                if (reserva.estado === 'pendiente') {
                    accionesReserva.innerHTML = `
                        <button type="button" class="btn btn-success confirmar-reserva me-2" data-id="${reserva.id}">
                            <i class="bi bi-check me-1"></i>Confirmar
                        </button>
                        <button type="button" class="btn btn-danger rechazar-reserva me-2" data-id="${reserva.id}">
                            <i class="bi bi-x me-1"></i>Rechazar
                        </button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    `;
                    
                    // Agregar event listeners
                    document.querySelector('.confirmar-reserva').addEventListener('click', function() {
                        const id = this.dataset.id;
                        showActionModal('confirmado', id, '¿Confirmar esta reserva?');
                        detalleReservaModal.hide();
                    });
                    
                    document.querySelector('.rechazar-reserva').addEventListener('click', function() {
                        const id = this.dataset.id;
                        showActionModal('rechazado', id, '¿Rechazar esta reserva? El horario quedará disponible nuevamente.');
                        detalleReservaModal.hide();
                    });
                } else {
                    accionesReserva.innerHTML = `
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    `;
                }
                
                detalleReservaModal.show();
            }
        }

        // Obtener clase CSS para estado
        function getStatusClass(status) {
            switch(status) {
                case 'pendiente': return 'status-pending';
                case 'confirmado': return 'status-confirmed';
                case 'rechazado': return 'status-rejected';
                default: return 'bg-secondary';
            }
        }

        // Obtener texto para estado
        function getStatusText(status) {
            switch(status) {
                case 'pendiente': return 'Pendiente';
                case 'confirmado': return 'Confirmado';
                case 'rechazado': return 'Rechazado';
                default: return status;
            }
        }

        // Formatear fecha y hora
        function formatDateTime(dateTime) {
            try {
                const date = new Date(dateTime);
                const options = { 
                    year: 'numeric', 
                    month: 'short', 
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                };
                return date.toLocaleDateString('es-ES', options);
            } catch (error) {
                return dateTime;
            }
        }

        // Mostrar modal de acción
        function showActionModal(action, id, message) {
            currentAction = action;
            currentReservaId = id;
            actionMessage.textContent = message;
            actionModal.show();
        }

        // Confirmar acción
        confirmAction.addEventListener('click', async function() {
            if (currentAction && currentReservaId) {
                try {
                    switch(currentAction) {
                        case 'confirmado':
                        case 'rechazado':
                            // Actualizar reserva
                            await updateDoc(doc(db, 'reservas', currentReservaId), { estado: currentAction });
                            break;
                            
                        case 'delete-barbero':
                            // Eliminar barbero
                            await deleteDoc(doc(db, 'barberos', currentReservaId));
                            break;
                            
                        case 'delete-servicio':
                            // Eliminar servicio
                            await deleteDoc(doc(db, 'servicios', currentReservaId));
                            break;
                    }
                    
                    actionModal.hide();
                    
                    // Actualizar datos según la acción
                    switch(currentAction) {
                        case 'confirmado':
                        case 'rechazado':
                            const reserva = reservasData.find(r => r.id === currentReservaId);
                            if (reserva) {
                                reserva.estado = currentAction;
                            }
                            renderReservas();
                            break;
                            
                        case 'delete-barbero':
                            await cargarBarberos();
                            break;
                            
                        case 'delete-servicio':
                            await cargarServicios();
                            break;
                    }
                } catch (error) {
                    console.error('Error al realizar acción:', error);
                    alert('Error al realizar la acción: ' + error.message);
                }
            }
        });

        // Aplicar filtros
        applyFilters.addEventListener('click', function() {
            const statusFilter = filterStatus.value;
            const barberFilter = filterBarber.value;
            const dateFilter = filterDate.value;

            let reservasFiltradas = [...reservasData];

            if (statusFilter) {
                reservasFiltradas = reservasFiltradas.filter(r => r.estado === statusFilter);
            }

            if (barberFilter) {
                reservasFiltradas = reservasFiltradas.filter(r => r.barberoId === barberFilter);
            }

            if (dateFilter) {
                reservasFiltradas = reservasFiltradas.filter(r => {
                    if (r.horarioId) {
                        const reservaDate = new Date(r.horarioId);
                        return reservaDate.toISOString().split('T')[0] === dateFilter;
                    }
                    return false;
                });
            }

            renderReservas(reservasFiltradas);
        });

        // Disponibilidad - Mostrar/Ocultar campo de otro motivo
        document.getElementById('motivoBloqueo').addEventListener('change', function() {
            const otroMotivoContainer = document.getElementById('otroMotivoContainer');
            if (this.value === 'otro') {
                otroMotivoContainer.style.display = 'block';
            } else {
                otroMotivoContainer.style.display = 'none';
            }
        });

        // Disponibilidad - Cargar barberos para disponibilidad
        async function cargarBarberosParaDisponibilidad() {
            try {
                const response = await fetch('/api/barberos');
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                const barberos = await response.json();
                
                const select = document.getElementById('barberoDisponibilidadSelect');
                select.innerHTML = '<option value="">Selecciona un barbero</option>';
                barberos.forEach(barbero => {
                    const option = document.createElement('option');
                    option.value = barbero.id;
                    option.textContent = barbero.nombre;
                    select.appendChild(option);
                });
            } catch (error) {
                console.error('Error al cargar barberos para disponibilidad:', error);
            }
        }

        // Disponibilidad - Mostrar días bloqueados
        async function mostrarDiasBloqueados(barberoId) {
            if (!barberoId) {
                document.getElementById('diasBloqueadosContainer').innerHTML = 
                    '<div class="text-muted">Selecciona un barbero para ver días bloqueados</div>';
                return;
            }
            
            try {
                // Obtener bloqueos del mes actual y próximo
                const hoy = new Date();
                const primerDiaMes = `${hoy.getFullYear()}-${String(hoy.getMonth() + 1).padStart(2, '0')}-01`;
                const proximoMes = new Date(hoy.getFullYear(), hoy.getMonth() + 2, 0);
                const ultimoDiaMes = `${hoy.getFullYear()}-${String(hoy.getMonth() + 1).padStart(2, '0')}-${String(proximoMes.getDate()).padStart(2, '0')}`;
                
                const response = await fetch(`/api/bloqueos/${barberoId}?fechaInicio=${primerDiaMes}&fechaFin=${ultimoDiaMes}`);
                if (response.ok) {
                    const bloqueos = await response.json();
                    bloqueosData = bloqueos;
                    
                    const container = document.getElementById('diasBloqueadosContainer');
                    if (bloqueos.length === 0) {
                        container.innerHTML = '<div class="text-muted">No hay días bloqueados</div>';
                    } else {
                        let html = '';
                        bloqueos.forEach(bloqueo => {
                            const fecha = new Date(bloqueo.fecha);
                            const fechaFormateada = fecha.toLocaleDateString('es-ES', {
                                weekday: 'long',
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric'
                            });
                            html += `
                                <div class="bloqueo-item">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div>
                                            <div class="fecha">${fechaFormateada}</div>
                                            <div class="motivo">${bloqueo.motivo}</div>
                                        </div>
                                        <button class="btn btn-sm btn-outline-danger desbloquear-btn" data-id="${bloqueo.id}" title="Desbloquear día">
                                            <i class="bi bi-unlock"></i>
                                        </button>
                                    </div>
                                </div>
                            `;
                        });
                        container.innerHTML = html;
                        
                        // Agregar event listeners a los botones de desbloqueo
                        document.querySelectorAll('.desbloquear-btn').forEach(btn => {
                            btn.addEventListener('click', async function() {
                                const id = this.dataset.id;
                                if (confirm('¿Desbloquear este día?')) {
                                    try {
                                        const response = await fetch(`/api/bloqueos/${id}`, {
                                            method: 'DELETE'
                                        });
                                        
                                        if (response.ok) {
                                            // Recargar días bloqueados
                                            await mostrarDiasBloqueados(barberoId);
                                            // Recargar calendario
                                            generarCalendarioDisp(currentMonthDisp, currentYearDisp);
                                        } else {
                                            throw new Error('Error al desbloquear día');
                                        }
                                    } catch (error) {
                                        console.error('Error al desbloquear día:', error);
                                        alert('Error al desbloquear día: ' + error.message);
                                    }
                                }
                            });
                        });
                    }
                } else {
                    const errorData = await response.json().catch(() => ({}));
                    const errorMessage = errorData.error || `Error HTTP: ${response.status}`;
                    document.getElementById('diasBloqueadosContainer').innerHTML = 
                        `<div class="text-danger">Error al cargar días bloqueados: ${errorMessage}</div>`;
                }
            } catch (error) {
                console.error('Error al cargar días bloqueados:', error);
                document.getElementById('diasBloqueadosContainer').innerHTML = 
                    '<div class="text-danger">Error al cargar días bloqueados</div>';
            }
        }

        // Disponibilidad - Evento para seleccionar barbero en disponibilidad
        document.getElementById('barberoDisponibilidadSelect').addEventListener('change', async function() {
            selectedBarberoIdDisp = this.value;
            if (selectedBarberoIdDisp) {
                await mostrarDiasBloqueados(selectedBarberoIdDisp);
                generarCalendarioDisp(currentMonthDisp, currentYearDisp);
            } else {
                document.getElementById('calendarioBodyDisp').innerHTML = 
                    '<tr><td colspan="7" class="text-center">Selecciona un barbero para ver su disponibilidad</td></tr>';
                document.getElementById('diasBloqueadosContainer').innerHTML = 
                    '<div class="text-muted">Selecciona un barbero para ver días bloqueados</div>';
            }
        });

        // Disponibilidad - Navegación del calendario
        document.getElementById('prevMonthDisp').addEventListener('click', function() {
            currentMonthDisp--;
            if (currentMonthDisp < 0) {
                currentMonthDisp = 11;
                currentYearDisp--;
            }
            generarCalendarioDisp(currentMonthDisp, currentYearDisp);
        });

        document.getElementById('nextMonthDisp').addEventListener('click', function() {
            currentMonthDisp++;
            if (currentMonthDisp > 11) {
                currentMonthDisp = 0;
                currentYearDisp++;
            }
            generarCalendarioDisp(currentMonthDisp, currentYearDisp);
        });

        // Disponibilidad - Generar calendario
        async function generarCalendarioDisp(month, year) {
            if (!selectedBarberoIdDisp) return;
            
            const date = new Date(year, month, 1);
            const diasEnMes = new Date(year, month + 1, 0).getDate();
            const primerDiaSemana = date.getDay();
            const hoy = new Date();
            hoy.setHours(0, 0, 0, 0);
            const hoyStr = `${hoy.getFullYear()}-${String(hoy.getMonth() + 1).padStart(2, '0')}-${String(hoy.getDate()).padStart(2, '0')}`;
            
            const mesNombres = [
                'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
                'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
            ];
            
            document.getElementById('mesAnioActualDisp').textContent = `${mesNombres[month]} ${year}`;
            
            // Obtener bloqueos del mes
            let bloqueos = [];
            if (selectedBarberoIdDisp) {
                const primerDiaMes = `${year}-${String(month + 1).padStart(2, '0')}-01`;
                const ultimoDiaMes = `${year}-${String(month + 1).padStart(2, '0')}-${String(diasEnMes).padStart(2, '0')}`;
                
                try {
                    const response = await fetch(`/api/bloqueos/${selectedBarberoIdDisp}?fechaInicio=${primerDiaMes}&fechaFin=${ultimoDiaMes}`);
                    if (response.ok) {
                        bloqueos = await response.json();
                    } else {
                        console.error('Error al obtener bloqueos:', response.status);
                    }
                } catch (error) {
                    console.error('Error al obtener bloqueos:', error);
                }
            }
            
            let html = '';
            let dia = 1;
            
            // Generar filas del calendario
            for (let i = 0; i < 6; i++) {
                html += '<tr>';
                
                // Generar columnas (días de la semana)
                for (let j = 0; j < 7; j++) {
                    if (i === 0 && j < primerDiaSemana) {
                        // Espacios en blanco antes del primer día del mes
                        html += '<td class="empty"></td>';
                    } else if (dia > diasEnMes) {
                        // Espacios en blanco después del último día del mes
                        html += '<td class="empty"></td>';
                    } else {
                        const fechaCompleta = `${year}-${String(month + 1).padStart(2, '0')}-${String(dia).padStart(2, '0')}`;
                        const fechaObj = new Date(fechaCompleta);
                        fechaObj.setHours(0, 0, 0, 0);
                        
                        const esFinDeSemana = (j === 0 || j === 6); // Domingo o Sábado
                        const esHoy = (fechaCompleta === hoyStr);
                        const esPasado = (fechaObj < hoy);
                        const tieneBloqueo = bloqueos.some(bloqueo => bloqueo.fecha === fechaCompleta);
                        
                        let clases = '';
                        if (esHoy) clases += ' today';
                        if (tieneBloqueo) clases += ' bloqueado';
                        if (esFinDeSemana || esPasado) clases += ' disabled';
                        if (esPasado) clases += ' pasado';
                        if (selectedDateDisp === fechaCompleta) clases += ' selected';
                        
                        html += `<td data-fecha="${fechaCompleta}" class="${clases}">${dia}</td>`;
                        dia++;
                    }
                }
                
                html += '</tr>';
                
                // Si ya mostramos todos los días, salir del bucle
                if (dia > diasEnMes) break;
            }
            
            document.getElementById('calendarioBodyDisp').innerHTML = html;
            
            // Agregar event listeners a los días
            document.querySelectorAll('#calendario td[data-fecha]').forEach(td => {
                td.addEventListener('click', function() {
                    const fecha = this.dataset.fecha;
                    const esFinDeSemana = this.classList.contains('disabled');
                    const estaBloqueado = this.classList.contains('bloqueado');
                    const esPasado = this.classList.contains('pasado');
                    
                    if (!esFinDeSemana && !estaBloqueado && !esPasado) {
                        // Remover clase selected de todos los días
                        document.querySelectorAll('#calendario td.selected').forEach(el => {
                            el.classList.remove('selected');
                        });
                        
                        // Agregar clase selected al día seleccionado
                        this.classList.add('selected');
                        selectedDateDisp = fecha;
                        
                        // Actualizar fecha de bloqueo
                        document.getElementById('fechaBloqueo').value = fecha;
                    }
                });
            });
        }

        // Disponibilidad - Bloquear día (función mejorada)
        document.getElementById('bloquearDiaBtn').addEventListener('click', async function() {
            const fecha = document.getElementById('fechaBloqueo').value;
            const motivoSelect = document.getElementById('motivoBloqueo').value;
            const otroMotivo = document.getElementById('otroMotivo').value;
            
            if (!selectedBarberoIdDisp) {
                alert('Selecciona un barbero primero');
                return;
            }
            
            if (!fecha) {
                alert('Selecciona una fecha');
                return;
            }
            
            const motivo = motivoSelect === 'otro' ? otroMotivo : motivoSelect;
            
            if (motivoSelect === 'otro' && !otroMotivo.trim()) {
                alert('Ingresa el motivo');
                return;
            }
            
            try {
                const response = await fetch('/api/bloqueos', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        barberoId: selectedBarberoIdDisp,
                        fecha: fecha,
                        motivo: motivo
                    })
                });
                
                if (response.ok) {
                    alert('Día bloqueado exitosamente');
                    document.getElementById('fechaBloqueo').value = '';
                    selectedDateDisp = null;
                    // Recargar calendario y días bloqueados
                    if (selectedBarberoIdDisp) {
                        generarCalendarioDisp(currentMonthDisp, currentYearDisp);
                        await mostrarDiasBloqueados(selectedBarberoIdDisp);
                    }
                } else {
                    const errorData = await response.json().catch(() => ({}));
                    const errorMessage = errorData.error || `Error HTTP: ${response.status}`;
                    alert('Error al bloquear día: ' + errorMessage);
                }
            } catch (error) {
                console.error('Error al bloquear día:', error);
                alert('Error de conexión al bloquear día. Por favor verifica tu conexión.');
            }
        });
    </script>
</body>
</html>